/*******************************************************************************/
/*  This file is auto-generated by GUIX Studio. Do not edit this file by hand. */
/*  Modifications to this file should only be made by running the GUIX Studio  */
/*  application and re-generating the application. For more information please */
/*  refer to the GUIX Studio user's guide, or visit our web site at            */
/*  www.expresslogic.com.                                                      */
/*                                                                             */
/*  GUIX Studio Revision 5.4.2.9                                               */
/*  Date (dd.mm.yyyy): 17. 2.2021   Time (hh:mm): 10:11                        */
/*******************************************************************************/


#ifndef _ASL4321_DISPLAY_DEMO_SPECIFICATIONS_H_
#define _ASL4321_DISPLAY_DEMO_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define TECLA_E_WINDIOW_ID 1
#define OK_BTN_ID 2
#define NEUTRAL_WINDOW_WINDOW 3
#define GROUP_ICON_BUTTON 4
#define DEVICE_TYPE_ICON 5
#define NEUTRAL_WINDOW_BTN_ID 6
#define SOUND_SETUP_SCREEN_ID 7
#define MANAGE_SOUND_SCREEN_ID 8
#define SOUND_OPTIONS_SCREEN_ID 9
#define SOUND_BTN_ID 10
#define USER_SOUND_SETUP_BTN_ID 11
#define MAIN_USER_SCREEN_ID 12
#define MAIN_USER_SCREEN_1_ID 13
#define MODE_PORT_FEATURE_ID 14
#define LEFT_PAD_BUTTON 15
#define FORWARD_PAD_BUTTON 16
#define RIGHT_PAD_BUTTON 17
#define REVERSE_PAD_BUTTON 18
#define FUNCTION1_ICON 19
#define FUNCTION2_ICON 20
#define FUNCTION3_ICON 21
#define FUNCTION4_ICON 22
#define FUNCTON0_ICON_ID 23
#define FEATURE_ICON_ID 24
#define FUSION_BUTTON_ID 25
#define TECLA_MAIN_PROMPT_ID 26
#define FEATURE_SETTINGS_SCREEN_ID 27
#define FEATURE_LIST_BOX_ID 28
#define HH_START_SCREEN_ID 29
#define FEATURE_VERTICAL_LIST 30
#define MAIN_USER_SCREEN_3 31
#define FIRST_ICON 32
#define FIRST_PROMPT 33
#define FOURTH_ICON 34
#define FOURTH_PROMPT 35
#define SECOND_ICON 36
#define SECOND_PROMPT 37
#define THIRD_ICON 38
#define THIRD_PROMPT 39
#define BOTH_ARROW_BTN_ID 40
#define Fifth_ICON 41
#define FIFTH_PROMPT 42
#define RESET_SCREEN_FINISH_ID 43
#define CONTINUE_BTN_ID 44
#define PROMPT1_ID 45
#define PROMPT2_ID 46
#define PROMPT3_ID 47
#define PROMPT4_ID 48
#define MINIMUM_DRIVE_SCREEN_ID 49
#define PROMPT_SET_MINIMUM_SPEED 50
#define PROMPT_FOR_EACH_PAD 51
#define FORWARD_PAD_PERCENTAGE_BTN_ID 52
#define LEFT_PAD_PERCENTAGE_BTN_ID 53
#define RIGHT_PAD_PERCENTAGE_BTN_ID 54
#define REVERSE_PAD_PERCENTAGE_BTN_ID 55
#define PERFORMANCE_SELECTION_SCREEN_ID 56
#define VEER_ADJUST_BTN_ID 57
#define RESET_SCREEN_ID 58
#define PROMPT_ID 59
#define MORE_SELECTION_SCREEN_ID 60
#define GOTO_DIAGNOSTICS_BTN_ID 61
#define GOTO_RESET_SCREEN_BTN_ID 62
#define HEAD_ARRAY_VERSION_PROMPT_ID 63
#define DISPLAY_VERSION_PROMPT_ID 64
#define USER_SELECTION_SCREEN_ID 65
#define USER_SETTINGS_BTN_ID 66
#define FEATURE_BTN_ID 67
#define PERFORMANCE_BTN_ID 68
#define VEER_ADJUST_SCREEN_ID 69
#define VEER_SLIDER_ID 70
#define SLIDE_VALUE_BUTTON 71
#define OON_SCREEN_ID 72
#define RELEASE_PAD_BUTTON_ID 73
#define READY_SCREEN_ID 74
#define READY_SCREEN_WINDOW_ID 75
#define POWER_LARGE_PROMPT_ID 76
#define STARTUP_SPLASH_SCREEN 77
#define CALIBRATION_SCREEN_ID 78
#define CENTER_PAD_ON_BTN_ID 79
#define MINIMUM_INSTRUCT_PROMPT_ID 80
#define LEFT_PAD_ON_BTN_ID 81
#define RIGHT_PAD_ON_BTN_ID 82
#define MAXIMUM_INSTRUCT_PROMPT_ID 83
#define VALUE_PROMPT_ID 84
#define PAD_VALUE_PROMPT_ID 85
#define SET_PAD_DIRECTION_SCREEN_ID 86
#define SETTING_PROMPT01_ID 87
#define LEFT_PAD_OFF_BTN_ID 88
#define RIGHT_PAD_OFF_BTN_ID 89
#define SETTING_PROMPT02_ID 90
#define REVERSE_PAD_OFF_BTN_ID 91
#define FORWARD_PAD_OFF_BTN_ID 92
#define PAD_SETTINGS_SCREEN_ID 93
#define PAD_TYPE_BTN_ID 94
#define PAD_DIRECTIONS_BTN_ID 95
#define MINIMUM_DRIVE_BTN_ID 96
#define DEVICE_TYPE_BTN_ID 97
#define PAD_OPTIONS_VERTICAL_LIST 98
#define USER_SETTINGS_SCREEN_ID 99
#define CLICKS_PROMPT_ID 100
#define TIMEOUT_PROMPT_ID 101
#define POWERUP_IDLE_PROMPT_ID 102
#define TIMEOUT_BTN_ID 103
#define RNET_ACTIVE_PROMPT_ID 104
#define CLICKS_TOGGLE_BTN 105
#define POWER_UP_TOGGLE_BTN 106
#define RNET_TOGGLE_BTN 107
#define MODE_PORT_SCHEMA_PROMPT_ID 108
#define MODE_SWITCH_SCHEMA_TOGGLE_BTN 109
#define SET_PAD_TYPE_SCREEN_ID 110
#define FORWARD_PAD_TYPE_BTN_ID 111
#define LEFT_PAD_TYPE_BTN_ID 112
#define RIGHT_PAD_TYPE_BTN_ID 113
#define DIAGNOSTIC_SCREEN_ID 114
#define CENTER_PAD_DIGITAL_BTN_ID 115
#define INSTRUCT_PROMPT_ID 116
#define LEFT_PAD_DIGITAL_BTN_ID 117
#define RIGHT_PAD_DIGITAL_BTN_ID 118
#define CENTER_PAD_PROP_BTN_ID 119
#define LEFT_PAD_PROP_BTN_ID 120
#define RIGHT_PAD_PROP_BTN_ID 121
#define CENTER_PAD_OFF_BTN_ID 122
#define LEFT_PAD_ADJUSTED_PROMPT 123
#define RIGHT_PAD_ADJUSTED_PROMPT 124
#define CENTER_PAD_ADJUSTED_PROMPT 125
#define USER_PORT_BUTTON 126
#define USER_PORT_PROMPT_DIAG_ID 127
#define MODE_PORT_BUTTON 128
#define Mode_PORT_PROMPT_DIAG_ID 129
#define DOWN_ARROW_BTN_ID 130
#define UP_ARROW_BTN_ID 131
#define MODE_PORT_BTN_ID 132
#define USER_PORT_BUTTON_ID 133
#define CHANGE_SCREEN_BTN_ID 134


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID unchecked_pixelmap_id;
    GX_RESOURCE_ID checked_pixelmap_id;
    GX_RESOURCE_ID unchecked_disabled_pixelmap_id;
    GX_RESOURCE_ID checked_disabled_pixelmap_id;
} GX_CHECKBOX_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID pixelmap_id;
} GX_ICON_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    int min_val;
    int max_val;
    int current_val;
    int increment;
    GX_VALUE min_travel;
    GX_VALUE max_travel;
    GX_VALUE needle_width;
    GX_VALUE needle_height;
    GX_VALUE needle_inset;
    GX_VALUE needle_hotspot;
    GX_RESOURCE_ID lower_pixelmap;
    GX_RESOURCE_ID upper_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
} GX_PIXELMAP_SLIDER_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    VOID (*format_func)(GX_NUMERIC_PROMPT *, INT);
    INT            numeric_prompt_value;
} GX_NUMERIC_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
} GX_PIXELMAP_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
    VOID (*callback)(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
    int total_rows;
} GX_VERTICAL_LIST_PROPERTIES;

typedef struct
{
   GX_CONST GX_STUDIO_WIDGET *base_info;
   UINT (*base_create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   GX_RECTANGLE size;
} GX_TEMPLATE_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct PRIMARYTEMPLATE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW PrimaryTemplate_window;
    GX_PIXELMAP_BUTTON PrimaryTemplate_DownArrowButton;
    GX_PIXELMAP_BUTTON PrimaryTemplate_UpArrowButton;
    GX_TEXT_BUTTON PrimaryTemplate_ModePortButton;
    GX_TEXT_BUTTON PrimaryTemplate_UserPortButton;
    GX_TEXT_BUTTON PrimaryTemplate_ChangeScreenButton;
} PRIMARYTEMPLATE_CONTROL_BLOCK;

typedef struct TECLA_E_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW Tecla_E_Screen_Tecla_E_Window;
} TECLA_E_SCREEN_CONTROL_BLOCK;

typedef struct JOYSTICKTHROWSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW JoystickThrowScreen_JoystickThrowScreen_window;
    GX_TEXT_BUTTON JoystickThrowScreen_OK_Button;
    GX_PROMPT JoystickThrowScreen_prompt_2;
} JOYSTICKTHROWSCREEN_CONTROL_BLOCK;

typedef struct NEUTRALWINDOWSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW NeutralWindowScreen_NeutralWindowScreen_window;
    GX_PROMPT NeutralWindowScreen_prompt_2;
    GX_TEXT_BUTTON NeutralWindowScreen_OK_Button;
    GX_ICON_BUTTON NeutralWindowScreen_GroupIconButton;
    GX_ICON NeutralWindowScreen_DeviceType_icon;
    GX_TEXT_BUTTON NeutralWindowScreen_NeutralWindowPercentage_Button;
} NEUTRALWINDOWSCREEN_CONTROL_BLOCK;

typedef struct SOUNDSETUPSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW SoundSetupScreen_SoundSetupScreenBackdrop;
    GX_TEXT_BUTTON SoundSetupScreen_OK_Button;
    GX_PROMPT SoundSetupScreen_prompt_2;
} SOUNDSETUPSCREEN_CONTROL_BLOCK;

typedef struct MANAGESOUNDSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW ManageSoundScreen_PadSettingsScreenBackdrop;
    GX_TEXT_BUTTON ManageSoundScreen_OK_Button;
    GX_PROMPT ManageSoundScreen_prompt_2;
} MANAGESOUNDSCREEN_CONTROL_BLOCK;

typedef struct SOUNDOPTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW SoundOptionScreen_PadSettingsScreenBackdrop;
    GX_TEXT_BUTTON SoundOptionScreen_Sound_Button;
    GX_TEXT_BUTTON SoundOptionScreen_SetupSounds_Button;
    GX_TEXT_BUTTON SoundOptionScreen_OK_Button;
    GX_ICON_BUTTON SoundOptionScreen_GroupIconButton;
} SOUNDOPTIONSCREEN_CONTROL_BLOCK;

typedef struct MAINUSERSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MainUserScreen_MainUserScreen_WindowName;
    GX_WINDOW MainUserScreen_ModePortWindow;
    GX_PROMPT MainUserScreen_ModePrompt;
    GX_PIXELMAP_BUTTON MainUserScreen_ModePortFeature;
    GX_PIXELMAP_PROMPT MainUserScreen_prompt_1;
    GX_ICON_BUTTON MainUserScreen_LeftPad_Button;
    GX_ICON_BUTTON MainUserScreen_ForwardPad_Button;
    GX_ICON_BUTTON MainUserScreen_RightPad_Button;
    GX_ICON_BUTTON MainUserScreen_ReversePad_Button;
    GX_WINDOW MainUserScreen_FunctionWindow;
    GX_ICON_BUTTON MainUserScreen_Function1_IconButton;
    GX_ICON_BUTTON MainUserScreen_Function2_IconButton;
    GX_ICON_BUTTON MainUserScreen_Function3_IconButton;
    GX_ICON_BUTTON MainUserScreen_Function4_IconButton;
    GX_PIXELMAP_PROMPT MainUserScreen_prompt;
    GX_ICON_BUTTON MainUserScreen_Function0_IconButton;
    GX_ICON MainUserScreen_FeatureIcon;
    GX_ICON_BUTTON MainUserScreen_GroupIconButton;
    GX_ICON MainUserScreen_Fusion_Button;
    GX_ICON MainUserScreen_DeviceType_icon;
    GX_PIXELMAP_PROMPT MainUserScreen_TeclaMain_Prompt;
} MAINUSERSCREEN_CONTROL_BLOCK;

typedef struct FEATURESETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW FeatureSettingsScreen_UserSettingsScreenBackdrop;
    GX_TEXT_BUTTON FeatureSettingsScreen_OK_Button;
    GX_VERTICAL_LIST FeatureSettingsScreen_FeatureListBox;
    GX_SCROLLBAR FeatureSettingsScreen_FeatureList_vertical_scroll;
    GX_ICON_BUTTON FeatureSettingsScreen_GroupIconButton;
} FEATURESETTINGSSCREEN_CONTROL_BLOCK;

typedef struct HHP_START_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW HHP_Start_Screen_HHP_Start_Backdrop;
    GX_VERTICAL_LIST HHP_Start_Screen_FeatureList;
    GX_SCROLLBAR HHP_Start_Screen_FeatureList_vertical_scroll;
    GX_TEXT_BUTTON HHP_Start_Screen_OK_Button;
    GX_ICON_BUTTON HHP_Start_Screen_GroupIconButton;
} HHP_START_SCREEN_CONTROL_BLOCK;

typedef struct MAINUSERSCREEN_3_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MainUserScreen_3_MainUserScreen_1_WindowName;
    GX_ICON_BUTTON MainUserScreen_3_LeftPad_Button;
    GX_ICON_BUTTON MainUserScreen_3_ForwardPad_Button;
    GX_ICON_BUTTON MainUserScreen_3_RightPad_Button;
    GX_ICON_BUTTON MainUserScreen_3_ReversePad_Button;
    GX_WINDOW MainUserScreen_3_FunctionWindow;
    GX_ICON_BUTTON MainUserScreen_3_Function1_IconButton;
    GX_ICON_BUTTON MainUserScreen_3_Function2_IconButton;
    GX_ICON_BUTTON MainUserScreen_3_Function3_IconButton;
    GX_ICON_BUTTON MainUserScreen_3_Function4_IconButton;
    GX_PIXELMAP_PROMPT MainUserScreen_3_prompt;
    GX_ICON_BUTTON MainUserScreen_3_Function0_IconButton;
    GX_ICON MainUserScreen_3_FeatureIcon;
    GX_ICON MainUserScreen_3_DeviceType_icon;
    GX_ICON_BUTTON MainUserScreen_3_GroupIconButton;
} MAINUSERSCREEN_3_CONTROL_BLOCK;

typedef struct MAINUSERSCREEN_OLD_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MainUserScreen_old_MainUserScreen_Screen;
    GX_ICON_BUTTON MainUserScreen_old_FirstIcon;
    GX_PROMPT MainUserScreen_old_FirstPrompt;
    GX_ICON_BUTTON MainUserScreen_old_FourthIcon;
    GX_PROMPT MainUserScreen_old_FourthPrompt;
    GX_ICON_BUTTON MainUserScreen_old_SecondIcon;
    GX_PROMPT MainUserScreen_old_SecondPrompt;
    GX_ICON_BUTTON MainUserScreen_old_ThirdIcon;
    GX_PROMPT MainUserScreen_old_ThirdPrompt;
    GX_BUTTON MainUserScreen_old_BothArrowButtonID_VirtualButton;
    GX_ICON_BUTTON MainUserScreen_old_FifthIcon;
    GX_PROMPT MainUserScreen_old_FifthPrompt;
    GX_PIXELMAP_BUTTON MainUserScreen_old_Fusion_Button;
} MAINUSERSCREEN_OLD_CONTROL_BLOCK;

typedef struct RESETSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW ResetScreen_ResetScreenBackdrop;
    GX_TEXT_BUTTON ResetScreen_Continue_Button;
    GX_TEXT_BUTTON ResetScreen_OK_Button;
    GX_PROMPT ResetScreen_Prompt1;
    GX_PROMPT ResetScreen_Prompt2;
    GX_PROMPT ResetScreen_Prompt3;
    GX_PROMPT ResetScreen_Prompt4;
    GX_ICON ResetScreen_icon;
} RESETSCREEN_CONTROL_BLOCK;

typedef struct MINIMUMDRIVESCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MinimumDriveScreen_MinimumDriveScreenBackdrop;
    GX_TEXT_BUTTON MinimumDriveScreen_OK_Button;
    GX_PROMPT MinimumDriveScreen_Prompt_SetMinimumSpeed;
    GX_PROMPT MinimumDriveScreen_Prompt_ForEachPad;
    GX_TEXT_BUTTON MinimumDriveScreen_ForwardPadPercentage_Button;
    GX_TEXT_BUTTON MinimumDriveScreen_LeftPadPercentage_Button;
    GX_TEXT_BUTTON MinimumDriveScreen_RightPadPercentage_Button;
    GX_ICON_BUTTON MinimumDriveScreen_GroupIconButton;
    GX_ICON MinimumDriveScreen_DeviceType_icon;
    GX_TEXT_BUTTON MinimumDriveScreen_ReversePadPercentage_Button;
} MINIMUMDRIVESCREEN_CONTROL_BLOCK;

typedef struct PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW PerformanceSelectionScreen_NextPadScreenBackdrop;
    GX_TEXT_BUTTON PerformanceSelectionScreen_OK_Button;
    GX_TEXT_BUTTON PerformanceSelectionScreen_VeerAdjust_Button;
    GX_ICON_BUTTON PerformanceSelectionScreen_GroupIconButton;
} PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK;

typedef struct RESETFINISHSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW ResetFinishScreen_ResetFinishScreenBackdrop;
    GX_TEXT_BUTTON ResetFinishScreen_OK_Button;
    GX_PROMPT ResetFinishScreen_Prompt;
} RESETFINISHSCREEN_CONTROL_BLOCK;

typedef struct MORESELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MoreSelectionScreen_UserSelectionScreenBackdrop;
    GX_TEXT_BUTTON MoreSelectionScreen_GotoDiagostics_Button;
    GX_TEXT_BUTTON MoreSelectionScreen_GotoResetSettings_lButton;
    GX_TEXT_BUTTON MoreSelectionScreen_OK_Button;
    GX_PROMPT MoreSelectionScreen_HeadArray_VersionPrompt;
    GX_PROMPT MoreSelectionScreen_VersionPrompt;
} MORESELECTIONSCREEN_CONTROL_BLOCK;

typedef struct USERSELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW UserSelectionScreen_UserSelectionScreenBackdrop;
    GX_TEXT_BUTTON UserSelectionScreen_UserSettings_Button;
    GX_TEXT_BUTTON UserSelectionScreen_FeatureSettings_lButton;
    GX_TEXT_BUTTON UserSelectionScreen_OK_Button;
    GX_TEXT_BUTTON UserSelectionScreen_Performance_Button;
    GX_ICON_BUTTON UserSelectionScreen_GroupIconButton;
} USERSELECTIONSCREEN_CONTROL_BLOCK;

typedef struct VEERADJUSTSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW VeerAdjustScreen_VeerAdjustScreenBackdrop;
    GX_PIXELMAP_SLIDER VeerAdjustScreen_VeerSlider;
    GX_TEXT_BUTTON VeerAdjustScreen_OK_Button;
    GX_TEXT_BUTTON VeerAdjustScreen_SliderValue_Button;
    GX_PROMPT VeerAdjustScreen_InstructionLine_1;
    GX_PROMPT VeerAdjustScreen_InstructionLine_2;
    GX_ICON_BUTTON VeerAdjustScreen_GroupIconButton;
} VEERADJUSTSCREEN_CONTROL_BLOCK;

typedef struct OON_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW OON_Screen_OON_Screen_Background;
    GX_PROMPT OON_Screen_ReleasePad_Button;
} OON_SCREEN_CONTROL_BLOCK;

typedef struct READYSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW ReadyScreen_ReadyScreen_Window;
    GX_PIXELMAP_PROMPT ReadyScreen_PowerLargePrompt;
    GX_PROMPT ReadyScreen_prompt;
} READYSCREEN_CONTROL_BLOCK;

typedef struct STARTUPSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW StartupScreen_StartupSplashScreen;
    GX_PIXELMAP_BUTTON StartupScreen_pixelmap_button;
} STARTUPSCREEN_CONTROL_BLOCK;

typedef struct PADCALIBRATIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW PadCalibrationScreen_PadScreenBackdrop;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_CenterPadON_Button;
    GX_PROMPT PadCalibrationScreen_MinimumInstructionsText;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_LeftPadON_Button;
    GX_TEXT_BUTTON PadCalibrationScreen_OK_Button;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_RightPadON_Button;
    GX_PROMPT PadCalibrationScreen_MaximumInstructionsText;
    GX_NUMERIC_PROMPT PadCalibrationScreen_Value_Prompt;
    GX_NUMERIC_PROMPT PadCalibrationScreen_PadValue_Prompt;
    GX_ICON_BUTTON PadCalibrationScreen_GroupIconButton;
} PADCALIBRATIONSCREEN_CONTROL_BLOCK;

typedef struct SETPADDIRECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW SetPadDirectionScreen_SetPadScreenBackdrop;
    GX_TEXT_BUTTON SetPadDirectionScreen_OK_Button;
    GX_PROMPT SetPadDirectionScreen_SettingPadPrompt_1;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_Off_Button;
    GX_PROMPT SetPadDirectionScreen_SettingPadPrompt_2;
    GX_ICON_BUTTON SetPadDirectionScreen_GroupIconButton;
    GX_ICON SetPadDirectionScreen_DeviceType_icon;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_ReversePad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_ForwardPad_Off_Button;
} SETPADDIRECTIONSCREEN_CONTROL_BLOCK;

typedef struct PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW PadOptionsSettingsScreen_PadSettingsScreenBackdrop;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_PadSettings_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_PadDirection_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_OK_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_PadOptonMinimumDrive;
    GX_ICON_BUTTON PadOptionsSettingsScreen_GroupIconButton;
    GX_WINDOW PadOptionsSettingsScreen_DriverControlwindow;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_DeviceType_Button;
    GX_ICON PadOptionsSettingsScreen_DeviceType_icon;
    GX_VERTICAL_LIST PadOptionsSettingsScreen_PadOptionsMenuList;
    GX_SCROLLBAR PadOptionsSettingsScreen_FeatureList_vertical_scroll;
} PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct USERSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW UserSettingsScreen_UserSettingsScreenBackdrop;
    GX_PROMPT UserSettingsScreen_Clicks_Prompt;
    GX_TEXT_BUTTON UserSettingsScreen_OK_Button;
    GX_PROMPT UserSettingsScreen_TImeoutPrompt;
    GX_PROMPT UserSettingsScreen_PowerUpIdle_Prompt;
    GX_TEXT_BUTTON UserSettingsScreen_Timeout_Button;
    GX_PROMPT UserSettingsScreen_RNetActive_Prompt;
    GX_CHECKBOX UserSettingsScreen_ClicksToggleBtn;
    GX_CHECKBOX UserSettingsScreen_PowerUpToggleBtn;
    GX_CHECKBOX UserSettingsScreen_RNET_ToggleBtn;
    GX_PROMPT UserSettingsScreen_ModePortSchema_Prompt;
    GX_CHECKBOX UserSettingsScreen_ModeSwitchSchema_ToggleBtn;
} USERSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct SETPADTYPESCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW SetPadTypeScreen_SetPadScreenBackdrop;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_ForwardPadType_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_LeftPadType_Button;
    GX_TEXT_BUTTON SetPadTypeScreen_OK_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_RightPadType_Button;
    GX_PROMPT SetPadTypeScreen_SettingPadPrompt;
    GX_PROMPT SetPadTypeScreen_SettingPadPrompt_1;
    GX_ICON_BUTTON SetPadTypeScreen_GroupIconButton;
    GX_ICON SetPadTypeScreen_DeviceType_icon;
} SETPADTYPESCREEN_CONTROL_BLOCK;

typedef struct DIAGNOSTICSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW DiagnosticScreen_DiagnosticScreenBackdrop;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadDigital_Button;
    GX_PROMPT DiagnosticScreen_InstructionsText;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadDigital_Button;
    GX_TEXT_BUTTON DiagnosticScreen_OK_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadDigital_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadOff_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadOff_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadOff_Button;
    GX_PROMPT DiagnosticScreen_LeftPad_Adjusted_Prompt;
    GX_PROMPT DiagnosticScreen_RightPad_Adjusted_Prompt;
    GX_PROMPT DiagnosticScreen_CenterPad_Adjusted_Prompt;
    GX_ICON_BUTTON DiagnosticScreen_UserPort_IconButton;
    GX_PROMPT DiagnosticScreen_UserPort_Prompt;
    GX_ICON_BUTTON DiagnosticScreen_ModePort_IconButton;
    GX_PROMPT DiagnosticScreen_ModePort_Prompt;
    GX_PROMPT DiagnosticScreen_HeadArray_VersionPrompt;
    GX_PROMPT DiagnosticScreen_VersionPrompt;
    GX_TEXT_BUTTON DiagnosticScreen_GotoResetSettings_lButton;
} DIAGNOSTICSCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern TECLA_E_SCREEN_CONTROL_BLOCK Tecla_E_Screen;
extern JOYSTICKTHROWSCREEN_CONTROL_BLOCK JoystickThrowScreen;
extern NEUTRALWINDOWSCREEN_CONTROL_BLOCK NeutralWindowScreen;
extern SOUNDSETUPSCREEN_CONTROL_BLOCK SoundSetupScreen;
extern MANAGESOUNDSCREEN_CONTROL_BLOCK ManageSoundScreen;
extern SOUNDOPTIONSCREEN_CONTROL_BLOCK SoundOptionScreen;
extern MAINUSERSCREEN_CONTROL_BLOCK MainUserScreen;
extern FEATURESETTINGSSCREEN_CONTROL_BLOCK FeatureSettingsScreen;
extern HHP_START_SCREEN_CONTROL_BLOCK HHP_Start_Screen;
extern MAINUSERSCREEN_3_CONTROL_BLOCK MainUserScreen_3;
extern MAINUSERSCREEN_OLD_CONTROL_BLOCK MainUserScreen_old;
extern RESETSCREEN_CONTROL_BLOCK ResetScreen;
extern MINIMUMDRIVESCREEN_CONTROL_BLOCK MinimumDriveScreen;
extern PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK PerformanceSelectionScreen;
extern RESETFINISHSCREEN_CONTROL_BLOCK ResetFinishScreen;
extern MORESELECTIONSCREEN_CONTROL_BLOCK MoreSelectionScreen;
extern USERSELECTIONSCREEN_CONTROL_BLOCK UserSelectionScreen;
extern VEERADJUSTSCREEN_CONTROL_BLOCK VeerAdjustScreen;
extern OON_SCREEN_CONTROL_BLOCK OON_Screen;
extern READYSCREEN_CONTROL_BLOCK ReadyScreen;
extern STARTUPSCREEN_CONTROL_BLOCK StartupScreen;
extern PADCALIBRATIONSCREEN_CONTROL_BLOCK PadCalibrationScreen;
extern SETPADDIRECTIONSCREEN_CONTROL_BLOCK SetPadDirectionScreen;
extern PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK PadOptionsSettingsScreen;
extern USERSETTINGSSCREEN_CONTROL_BLOCK UserSettingsScreen;
extern SETPADTYPESCREEN_CONTROL_BLOCK SetPadTypeScreen;
extern DIAGNOSTICSCREEN_CONTROL_BLOCK DiagnosticScreen;
extern PRIMARYTEMPLATE_CONTROL_BLOCK PrimaryTemplate;
#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT Tecla_E_Screen_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT JoystickThrow_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT NeutralWindow_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT SoundSetupScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ManageSoundScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT SoundOptionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MainUserScreen_EventFunction(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT FeatureSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID FeatureList_callback(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT HHP_Start_Screen_event_process_new(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID MenuItem_Callback(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT MainUserScreen_3_EventFunction(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MainUserScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID MainUserScreen_draw_function(GX_WINDOW *widget);
UINT ResetScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MinimumDriveScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT PerformanceSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ResetFinishScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MoreSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT UserSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT VeerAdjust_Screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID VeerAdjust_Screen_draw_function(GX_WINDOW *widget);
UINT VeerSlider_event_function(GX_PIXELMAP_SLIDER *widget, GX_EVENT *event_ptr);
VOID Slider_Draw_Function(GX_PIXELMAP_SLIDER *widget);
UINT OON_Window_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ReadyScreen_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT StartupScreen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID StartScreen_draw_function(GX_WINDOW *widget);
UINT CalibrationScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID CalibrationScreen_draw(GX_WINDOW *widget);
UINT SetPadDirectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT PadOptionsSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID PadOptionsMenuList_Callback(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT UserSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT SetPadTypeScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT DiagnosticScreen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT Template_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_CHAR ***language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_checkbox_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_numeric_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_list_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_scrollbar_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_template_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */

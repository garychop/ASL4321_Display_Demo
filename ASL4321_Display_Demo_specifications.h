/*******************************************************************************/
/*  This file is auto-generated by GUIX Studio. Do not edit this file by hand. */
/*  Modifications to this file should only be made by running the GUIX Studio  */
/*  application and re-generating the application. For more information please */
/*  refer to the GUIX Studio user's guide, or visit our web site at            */
/*  www.expresslogic.com.                                                      */
/*                                                                             */
/*  GUIX Studio Revision 5.4.2.9                                               */
/*  Date (dd.mm.yyyy):  8. 1.2021   Time (hh:mm): 09:38                        */
/*******************************************************************************/


#ifndef _ASL4321_DISPLAY_DEMO_SPECIFICATIONS_H_
#define _ASL4321_DISPLAY_DEMO_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define MAIN_USER_SCREEN_3 1
#define MAIN_USER_SCREEN_1_ID 2
#define MODE_PORT_FEATURE_ID 3
#define LEFT_PAD_BUTTON 4
#define FORWARD_PAD_BUTTON 5
#define RIGHT_PAD_BUTTON 6
#define REVERSE_PAD_BUTTON 7
#define FUNCTION1_ICON 8
#define FUNCTION2_ICON 9
#define FUNCTION3_ICON 10
#define FUNCTION4_ICON 11
#define FUNCTON0_ICON_ID 12
#define FEATURE_SETTINGS_SCREEN_ID 13
#define OK_BTN_ID 14
#define FEATURE_LIST_BOX_ID 15
#define UP_ARROW_BTN_ID 16
#define DOWN_ARROW_BTN_ID 17
#define HH_START_SCREEN_ID_1 18
#define MORE_BTN_ID 19
#define USER_PORT_FEATURE_ID 20
#define MAIN_USER_SCREEN_2 21
#define CENTER_PAD_FORWARD_ARROW_BTN_ID 22
#define LEFT_PAD_LEFT_ARROW_BTN_ID 23
#define RIGHT_PAD_RIGHT_ARROW_BTN_ID 24
#define LEFT_PAD_RIGHT_ARROW_BTN_ID 25
#define LEFT_PAD_FORWARD_ARROW_BTN_ID 26
#define LEFT_PAD_OFF_BTN_ID 27
#define RIGHT_PAD_LEFT_ARROW_BTN_ID 28
#define RIGHT_PAD_FORWARD_ARROW_BTN_ID 29
#define RIGHT_PAD_OFF_BTN_ID 30
#define CENTER_PAD_LEFT_ARROW_BTN_ID 31
#define CENTER_PAD_RIGHT_ARROW_BTN_ID 32
#define CENTER_PAD_OFF_BTN_ID 33
#define ADVANCE_PAD_3_SCREEN 34
#define SETTINGS_BTN_ID 35
#define PAD_SETTINGS_BTN_ID 36
#define SET_PAD_DIRECTION_SCREEN_ID 37
#define SETTING_PROMPT01_ID 38
#define ADVANCE_PAD_SETTINGS_SCREEN_1_ID 39
#define POWER_PROMPT_ID 40
#define BLUETOOTH_PROMPT_ID 41
#define NEXT_FUNCTION_PROMPT_ID 42
#define BLUETOOTH_TOGGLE_BTN 43
#define POWER_TOGGLE_BTN 44
#define NEXT_FUNCTION_TOGGLE_BTN 45
#define NEXT_PROFILE_TOGGLE_BTN 46
#define DOWN_ARROW_BUTTON_ID 47
#define UP_ARROW_BUTTON_ID 48
#define NEXT_PROFILE_PROMPT_ID 49
#define PROMPT_ID_1 50
#define PROMPT_ID_2 51
#define PROMPT_ID_3 52
#define TOGGLE_BTN_2 53
#define TOGGLE_BTN_1 54
#define TOGGLE_BTN_3 55
#define PROMPT_ID_4 56
#define ADVANCE_PAD_2_SCREEN 57
#define ADVANCE_PAD_1_SCREEN 58
#define ADVANCE_PAD_SETTINGS_SCREEN_ID 59
#define POWER_BTN_ID 60
#define POWER_ACTIVE_ICON 61
#define POWER_INACTIVE_ICON 62
#define BLUETOOTH_BTN_ID 63
#define BLUETOOTH_ACTIVE_ICON 64
#define BLUETOOTH_INACTIVE_ICON 65
#define NEXT_FUNCTION_BTN_ID 66
#define NEXT_FUNCTION_ACTIVE_ICON 67
#define NEXT_FUNCTION_INACTIVE_ICON 68
#define NEXT_PROFILE_BTN_ID 69
#define NEXT_PROFILE_ACTIVE_ICON 70
#define NEXT_PROFILE_INACTIVE_ICON 71
#define MAIN_USER_SCREEN_ID 72
#define FIRST_ICON 73
#define FIRST_PROMPT 74
#define FOURTH_ICON 75
#define FOURTH_PROMPT 76
#define SECOND_ICON 77
#define SECOND_PROMPT 78
#define THIRD_ICON 79
#define THIRD_PROMPT 80
#define BOTH_ARROW_BTN_ID 81
#define Fifth_ICON 82
#define FIFTH_PROMPT 83
#define RESET_SCREEN_FINISH_ID 84
#define CONTINUE_BTN_ID 85
#define PROMPT1_ID 86
#define PROMPT2_ID 87
#define PROMPT3_ID 88
#define PROMPT4_ID 89
#define MINIMUM_DRIVE_SCREEN_ID 90
#define PROMPT_1_ID 91
#define PROMPT_2_ID 92
#define DRIVE_PERCENTAGE_BTN_ID 93
#define PERFORMANCE_SELECTION_SCREEN_ID 94
#define MINIMUM_DRIVE_BTN_ID 95
#define VEER_ADJUST_BTN_ID 96
#define RESET_SCREEN_ID 97
#define PROMPT_ID 98
#define MORE_SELECTION_SCREEN_ID 99
#define GOTO_DIAGNOSTICS_BTN_ID 100
#define GOTO_RESET_SCREEN_BTN_ID 101
#define HEAD_ARRAY_VERSION_PROMPT_ID 102
#define DISPLAY_VERSION_PROMPT_ID 103
#define USER_SELECTION_SCREEN_ID 104
#define USER_SETTINGS_BTN_ID 105
#define FEATURE_BTN_ID 106
#define PERFORMANCE_BTN_ID 107
#define VEER_ADJUST_SCREEN_ID 108
#define VEER_SLIDER_ID 109
#define SLIDE_VALUE_BUTTON 110
#define OON_SCREEN_ID 111
#define RELEASE_PAD_BUTTON_ID 112
#define READY_SCREEN_ID 113
#define POWER_LARGE_PROMPT_ID 114
#define STARTUP_SPLASH_SCREEN 115
#define CALIBRATION_SCREEN_ID 116
#define CENTER_PAD_ON_BTN_ID 117
#define MINIMUM_INSTRUCT_PROMPT_ID 118
#define LEFT_PAD_ON_BTN_ID 119
#define RIGHT_PAD_ON_BTN_ID 120
#define MAXIMUM_INSTRUCT_PROMPT_ID 121
#define VALUE_PROMPT_ID 122
#define PAD_VALUE_PROMPT_ID 123
#define FEATURE_SETTINGS_SCREEN_ID_OLD 124
#define PAD_SETTINGS_SCREEN_ID 125
#define PAD_TYPE_BTN_ID 126
#define PAD_DIRECTIONS_BTN_ID 127
#define USER_SETTINGS_SCREEN_ID 128
#define CLICKS_BTN_ID 129
#define CLICKS_PROMPT_ID 130
#define CLICKS_ACTIVE_ICON 131
#define TIMER_OFF_BTN_ID 132
#define TIMEOUT_PROMPT_ID 133
#define POWERUP_IDLE_PROMPT_ID 134
#define PWR_UP_BCKGND_ID 135
#define POWER_UP_INACTIVE_ICON 136
#define POWER_UP_ACTIVE_ICON 137
#define TIMEOUT_BTN_ID 138
#define RNET_ACTIVE_PROMPT_ID 139
#define RNET_BACKGROUND_ID 140
#define CLICKS_INACTIVE_ICON 141
#define RNET_INACTIVE_ICON 142
#define RNET_ACTIVE_ICON 143
#define CLICKS_TOGGLE_BTN 144
#define POWER_UP_TOGGLE_BTN 145
#define RNET_TOGGLE_BTN 146
#define SET_PAD_TYPE_SCREEN_ID 147
#define CENTER_PAD_DIGITAL_BTN_ID 148
#define CENTER_PAD_PROPORTIONAL_BTN_ID 149
#define LEFT_PAD_DIGITAL_BTN_ID 150
#define LEFT_PAD_PROPORTIONAL_BTN_ID 151
#define RIGHT_PAD_DIGITAL_BTN_ID 152
#define RIGHT_PAD_PROPORTIONAL_BTN_ID 153
#define DIAGNOSTIC_SCREEN_ID 154
#define INSTRUCT_PROMPT_ID 155
#define CENTER_PAD_PROP_BTN_ID 156
#define LEFT_PAD_PROP_BTN_ID 157
#define RIGHT_PAD_PROP_BTN_ID 158
#define LEFT_PAD_ADJUSTED_PROMPT 159
#define RIGHT_PAD_ADJUSTED_PROMPT 160
#define CENTER_PAD_ADJUSTED_PROMPT 161
#define HH_START_SCREEN_ID 162
#define MODE_PORT_BTN_ID 163
#define USER_PORT_BUTTON_ID 164
#define CHANGE_SCREEN_BTN_ID 165


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID unchecked_pixelmap_id;
    GX_RESOURCE_ID checked_pixelmap_id;
    GX_RESOURCE_ID unchecked_disabled_pixelmap_id;
    GX_RESOURCE_ID checked_disabled_pixelmap_id;
} GX_CHECKBOX_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID pixelmap_id;
} GX_ICON_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    int min_val;
    int max_val;
    int current_val;
    int increment;
    GX_VALUE min_travel;
    GX_VALUE max_travel;
    GX_VALUE needle_width;
    GX_VALUE needle_height;
    GX_VALUE needle_inset;
    GX_VALUE needle_hotspot;
    GX_RESOURCE_ID lower_pixelmap;
    GX_RESOURCE_ID upper_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
} GX_PIXELMAP_SLIDER_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    VOID (*format_func)(GX_NUMERIC_PROMPT *, INT);
    INT            numeric_prompt_value;
} GX_NUMERIC_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
} GX_PIXELMAP_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
    VOID (*callback)(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
    int total_rows;
} GX_VERTICAL_LIST_PROPERTIES;

typedef struct
{
   GX_CONST GX_STUDIO_WIDGET *base_info;
   UINT (*base_create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   GX_RECTANGLE size;
} GX_TEMPLATE_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct PRIMARYTEMPLATE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW PrimaryTemplate_window;
    GX_PIXELMAP_BUTTON PrimaryTemplate_DownArrowButton;
    GX_PIXELMAP_BUTTON PrimaryTemplate_UpArrowButton;
    GX_TEXT_BUTTON PrimaryTemplate_ModePortButton;
    GX_TEXT_BUTTON PrimaryTemplate_UserPortButton;
    GX_TEXT_BUTTON PrimaryTemplate_ChangeScreenButton;
} PRIMARYTEMPLATE_CONTROL_BLOCK;

typedef struct MAINUSERSCREEN_1_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MainUserScreen_1_MainUserScreen_1_WindowName;
    GX_WINDOW MainUserScreen_1_ModePortWindow;
    GX_PROMPT MainUserScreen_1_ModePrompt;
    GX_PIXELMAP_BUTTON MainUserScreen_1_ModePortFeature;
    GX_PIXELMAP_PROMPT MainUserScreen_1_prompt_1;
    GX_ICON_BUTTON MainUserScreen_1_LeftPad_Button;
    GX_ICON_BUTTON MainUserScreen_1_ForwardPad_Button;
    GX_ICON_BUTTON MainUserScreen_1_RightPad_Button;
    GX_ICON_BUTTON MainUserScreen_1_ReversePad_Button;
    GX_WINDOW MainUserScreen_1_FunctionWindow;
    GX_ICON_BUTTON MainUserScreen_1_Function1;
    GX_ICON_BUTTON MainUserScreen_1_Function2;
    GX_ICON_BUTTON MainUserScreen_1_Function3;
    GX_ICON_BUTTON MainUserScreen_1_Function4;
    GX_PIXELMAP_PROMPT MainUserScreen_1_prompt;
    GX_ICON MainUserScreen_1_Function0_Icon;
} MAINUSERSCREEN_1_CONTROL_BLOCK;

typedef struct FEATURESETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW FeatureSettingsScreen_UserSettingsScreenBackdrop;
    GX_TEXT_BUTTON FeatureSettingsScreen_OK_Button;
    GX_VERTICAL_LIST FeatureSettingsScreen_FeatureListBox;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_UpArrowButton;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_DownArrowButton;
} FEATURESETTINGSSCREEN_CONTROL_BLOCK;

typedef struct HHP_START_SCREEN_1_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW HHP_Start_Screen_1_HHP_Start_Backdrop;
    GX_TEXT_BUTTON HHP_Start_Screen_1_MainMore_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_1_OK_Button;
    GX_PIXELMAP_BUTTON HHP_Start_Screen_1_pixelmap_button_4;
    GX_PIXELMAP_BUTTON HHP_Start_Screen_1_pixelmap_button_1;
    GX_PIXELMAP_BUTTON HHP_Start_Screen_1_pixelmap_button_2;
    GX_PIXELMAP_BUTTON HHP_Start_Screen_1_pixelmap_button_3;
} HHP_START_SCREEN_1_CONTROL_BLOCK;

typedef struct MAINUSERSCREEN_3_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MainUserScreen_3_MainUserScreen_1_WindowName;
    GX_WINDOW MainUserScreen_3_ModePortWindow;
    GX_PROMPT MainUserScreen_3_ModePrompt;
    GX_PIXELMAP_BUTTON MainUserScreen_3_ModePortFeature;
    GX_PIXELMAP_PROMPT MainUserScreen_3_prompt_1;
    GX_ICON_BUTTON MainUserScreen_3_LeftPad_Button;
    GX_ICON_BUTTON MainUserScreen_3_ForwardPad_Button;
    GX_ICON_BUTTON MainUserScreen_3_RightPad_Button;
    GX_ICON_BUTTON MainUserScreen_3_ReversePad_Button;
    GX_WINDOW MainUserScreen_3_FunctionWindow;
    GX_WINDOW MainUserScreen_3_UserPortWindow;
    GX_PROMPT MainUserScreen_3_UserPortPrompt;
    GX_PIXELMAP_BUTTON MainUserScreen_3_UserPortFeature;
    GX_PIXELMAP_PROMPT MainUserScreen_3_prompt;
    GX_ICON_BUTTON MainUserScreen_3_icon_button;
    GX_ICON_BUTTON MainUserScreen_3_icon_button_1;
    GX_ICON_BUTTON MainUserScreen_3_icon_button_2;
} MAINUSERSCREEN_3_CONTROL_BLOCK;

typedef struct MAINUSERSCREEN_2_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MainUserScreen_2_MainUserScreen_1_WindowName;
    GX_PIXELMAP_BUTTON MainUserScreen_2_CenterPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_LeftPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_RightPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_LeftPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_LeftPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_LeftPad_Off_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_RightPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_RightPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_RightPad_Off_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_CenterPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_CenterPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_CenterPad_Off_Button;
    GX_PIXELMAP_BUTTON MainUserScreen_2_CenterPad_ForwardArrow_Button_1;
    GX_WINDOW MainUserScreen_2_ModePortWindow;
    GX_PROMPT MainUserScreen_2_ModePrompt;
    GX_PIXELMAP_BUTTON MainUserScreen_2_ModePortFeature;
    GX_PIXELMAP_PROMPT MainUserScreen_2_prompt_1;
    GX_WINDOW MainUserScreen_2_UserPortWindow;
    GX_PROMPT MainUserScreen_2_UserPortPrompt;
    GX_PIXELMAP_BUTTON MainUserScreen_2_UserPortFeature;
    GX_PIXELMAP_PROMPT MainUserScreen_2_prompt;
    GX_PIXELMAP_BUTTON MainUserScreen_2_pixelmap_button_1;
} MAINUSERSCREEN_2_CONTROL_BLOCK;

typedef struct ADVANCEPAD_3_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW AdvancePad_3_Screen_AdvancePad_3_Screen_WindowName;
    GX_TEXT_BUTTON AdvancePad_3_Screen_Settings_Button;
    GX_TEXT_BUTTON AdvancePad_3_Screen_OK_Button;
    GX_TEXT_BUTTON AdvancePad_3_Screen_PadSettings_Button;
} ADVANCEPAD_3_SCREEN_CONTROL_BLOCK;

typedef struct SETPADDIRECTIONSCREEN_1_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW SetPadDirectionScreen_1_SetPadScreenBackdrop;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_CenterPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_LeftPad_LeftArrow_Button;
    GX_TEXT_BUTTON SetPadDirectionScreen_1_OK_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_RightPad_RightArrow_Button;
    GX_PROMPT SetPadDirectionScreen_1_SettingPadPrompt;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_LeftPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_LeftPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_LeftPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_RightPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_RightPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_RightPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_CenterPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_CenterPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_CenterPad_Off_Button;
    GX_PROMPT SetPadDirectionScreen_1_SettingPadPrompt_1;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_1_CenterPad_ForwardArrow_Button_1;
} SETPADDIRECTIONSCREEN_1_CONTROL_BLOCK;

typedef struct ADVANCEPADSETTINGSSCREEN_2_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW AdvancePadSettingsScreen_2_UserSettingsScreenBackdrop;
    GX_PROMPT AdvancePadSettingsScreen_2_PowerPrompt;
    GX_PROMPT AdvancePadSettingsScreen_2_BluetoothPrompt;
    GX_PROMPT AdvancePadSettingsScreen_2_NextFunctionPrompt;
    GX_TEXT_BUTTON AdvancePadSettingsScreen_2_OK_Button;
    GX_CHECKBOX AdvancePadSettingsScreen_2_BluetoothToggleBtn;
    GX_CHECKBOX AdvancePadSettingsScreen_2_PowerToggleBtn;
    GX_CHECKBOX AdvancePadSettingsScreen_2_NextFunctionToggleBtn;
    GX_CHECKBOX AdvancePadSettingsScreen_2_NextProfileToggleBtn;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_2_DownArrowButton;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_2_UpArrowButton;
    GX_PROMPT AdvancePadSettingsScreen_2_NextProfilePrompt;
} ADVANCEPADSETTINGSSCREEN_2_CONTROL_BLOCK;

typedef struct ADVANCEPADSETTINGSSCREEN_1_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW AdvancePadSettingsScreen_1_UserSettingsScreenBackdrop;
    GX_PROMPT AdvancePadSettingsScreen_1_Prompt1;
    GX_PROMPT AdvancePadSettingsScreen_1_Prompt2;
    GX_PROMPT AdvancePadSettingsScreen_1_Prompt3;
    GX_TEXT_BUTTON AdvancePadSettingsScreen_1_OK_Button;
    GX_CHECKBOX AdvancePadSettingsScreen_1_ToggleBtn2;
    GX_CHECKBOX AdvancePadSettingsScreen_1_ToggleBtn1;
    GX_CHECKBOX AdvancePadSettingsScreen_1_ToggleBtn3;
    GX_CHECKBOX AdvancePadSettingsScreen_1_ToggleBtn;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_1_DownArrowButton;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_1_UpArrowButton;
    GX_PROMPT AdvancePadSettingsScreen_1_Prompt4;
} ADVANCEPADSETTINGSSCREEN_1_CONTROL_BLOCK;

typedef struct ADVANCEPAD_2_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW AdvancePad_2_Screen_AdvancePad_2_WindowName;
    GX_PROMPT AdvancePad_2_Screen_PowerPrompt;
    GX_PROMPT AdvancePad_2_Screen_BluetoothPrompt;
    GX_PROMPT AdvancePad_2_Screen_NextFunctionPrompt;
    GX_TEXT_BUTTON AdvancePad_2_Screen_OK_Button;
    GX_CHECKBOX AdvancePad_2_Screen_BluetoothToggleBtn;
    GX_CHECKBOX AdvancePad_2_Screen_PowerToggleBtn;
    GX_CHECKBOX AdvancePad_2_Screen_NextFunctionToggleBtn;
} ADVANCEPAD_2_SCREEN_CONTROL_BLOCK;

typedef struct ADVANCEPAD_1_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW AdvancePad_1_Screen_AdvancePad_1_Screen_WindowName;
    GX_TEXT_BUTTON AdvancePad_1_Screen_Settings_Button;
    GX_TEXT_BUTTON AdvancePad_1_Screen_OK_Button;
    GX_TEXT_BUTTON AdvancePad_1_Screen_PadSettings_Button;
} ADVANCEPAD_1_SCREEN_CONTROL_BLOCK;

typedef struct ADVANCEPADSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW AdvancePadSettingsScreen_AdvancePadSettingScreen_WindowName;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_PowerButtonBackground;
    GX_PROMPT AdvancePadSettingsScreen_PowerPrompt;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_Power_ActiveIcon;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_Power_InactiveIcon;
    GX_PROMPT AdvancePadSettingsScreen_BluetoothPrompt;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_BluetoothButtonBackground;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_Bluetooth_ActiveIcon;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_Bluetooth_InactiveIcon;
    GX_PROMPT AdvancePadSettingsScreen_NextFunctionPrompt;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_NextFunctionButtonBackground;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_NextFunction_ActiveIcon;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_NextFunction_InactiveIcon;
    GX_PROMPT AdvancePadSettingsScreen_NextProfilePrompt;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_NextProfileButtonBackground;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_NextProfile_ActiveIcon;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_NextProfile_InactiveIcon;
    GX_TEXT_BUTTON AdvancePadSettingsScreen_OK_Button;
    GX_CHECKBOX AdvancePadSettingsScreen_BluetoothToggleBtn;
    GX_CHECKBOX AdvancePadSettingsScreen_PowerToggleBtn;
    GX_CHECKBOX AdvancePadSettingsScreen_NextFunctionToggleBtn;
    GX_CHECKBOX AdvancePadSettingsScreen_NextProfileToggleBtn;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_DownArrowButton;
    GX_PIXELMAP_BUTTON AdvancePadSettingsScreen_UpArrowButton;
} ADVANCEPADSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct MAINUSERSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MainUserScreen_MainUserScreen_Screen;
    GX_ICON_BUTTON MainUserScreen_FirstIcon;
    GX_PROMPT MainUserScreen_FirstPrompt;
    GX_ICON_BUTTON MainUserScreen_FourthIcon;
    GX_PROMPT MainUserScreen_FourthPrompt;
    GX_ICON_BUTTON MainUserScreen_SecondIcon;
    GX_PROMPT MainUserScreen_SecondPrompt;
    GX_ICON_BUTTON MainUserScreen_ThirdIcon;
    GX_PROMPT MainUserScreen_ThirdPrompt;
    GX_BUTTON MainUserScreen_BothArrowButtonID_VirtualButton;
    GX_ICON_BUTTON MainUserScreen_FifthIcon;
    GX_PROMPT MainUserScreen_FifthPrompt;
} MAINUSERSCREEN_CONTROL_BLOCK;

typedef struct RESETSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW ResetScreen_ResetScreenBackdrop;
    GX_TEXT_BUTTON ResetScreen_Continue_Button;
    GX_TEXT_BUTTON ResetScreen_OK_Button;
    GX_PROMPT ResetScreen_Prompt1;
    GX_PROMPT ResetScreen_Prompt2;
    GX_PROMPT ResetScreen_Prompt3;
    GX_PROMPT ResetScreen_Prompt4;
    GX_ICON ResetScreen_icon;
} RESETSCREEN_CONTROL_BLOCK;

typedef struct MINIMUMDRIVESCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MinimumDriveScreen_MinimumDriveScreenBackdrop;
    GX_TEXT_BUTTON MinimumDriveScreen_OK_Button;
    GX_PROMPT MinimumDriveScreen_Prompt_1;
    GX_PROMPT MinimumDriveScreen_Prompt_2;
    GX_TEXT_BUTTON MinimumDriveScreen_DriverPencentage_Button;
} MINIMUMDRIVESCREEN_CONTROL_BLOCK;

typedef struct PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW PerformanceSelectionScreen_NextPadScreenBackdrop;
    GX_TEXT_BUTTON PerformanceSelectionScreen_MinimumDrive_lButton;
    GX_TEXT_BUTTON PerformanceSelectionScreen_OK_Button;
    GX_TEXT_BUTTON PerformanceSelectionScreen_VeerAdjust_Button;
} PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK;

typedef struct RESETFINISHSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW ResetFinishScreen_ResetFinishScreenBackdrop;
    GX_TEXT_BUTTON ResetFinishScreen_OK_Button;
    GX_PROMPT ResetFinishScreen_Prompt;
} RESETFINISHSCREEN_CONTROL_BLOCK;

typedef struct MORESELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW MoreSelectionScreen_UserSelectionScreenBackdrop;
    GX_TEXT_BUTTON MoreSelectionScreen_GotoDiagostics_Button;
    GX_TEXT_BUTTON MoreSelectionScreen_GotoResetSettings_lButton;
    GX_TEXT_BUTTON MoreSelectionScreen_OK_Button;
    GX_PROMPT MoreSelectionScreen_HeadArray_VersionPrompt;
    GX_PROMPT MoreSelectionScreen_VersionPrompt;
} MORESELECTIONSCREEN_CONTROL_BLOCK;

typedef struct USERSELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW UserSelectionScreen_UserSelectionScreenBackdrop;
    GX_TEXT_BUTTON UserSelectionScreen_UserSettings_Button;
    GX_TEXT_BUTTON UserSelectionScreen_FeatureSettings_lButton;
    GX_TEXT_BUTTON UserSelectionScreen_OK_Button;
    GX_TEXT_BUTTON UserSelectionScreen_Performance_Button;
} USERSELECTIONSCREEN_CONTROL_BLOCK;

typedef struct VEERADJUSTSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW VeerAdjustScreen_VeerAdjustScreenBackdrop;
    GX_PIXELMAP_SLIDER VeerAdjustScreen_VeerSlider;
    GX_TEXT_BUTTON VeerAdjustScreen_OK_Button;
    GX_TEXT_BUTTON VeerAdjustScreen_SliderValue_Button;
    GX_PROMPT VeerAdjustScreen_InstructionLine_1;
    GX_PROMPT VeerAdjustScreen_InstructionLine_2;
} VEERADJUSTSCREEN_CONTROL_BLOCK;

typedef struct OON_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW OON_Screen_OON_Screen_Background;
    GX_PROMPT OON_Screen_ReleasePad_Button;
} OON_SCREEN_CONTROL_BLOCK;

typedef struct READYSCREEN_TEMPLATE_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW ReadyScreen_Template_ReadyScreen;
    GX_PIXELMAP_PROMPT ReadyScreen_Template_PowerLargePrompt;
    GX_PROMPT ReadyScreen_Template_prompt;
} READYSCREEN_TEMPLATE_CONTROL_BLOCK;

typedef struct STARTUPSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW StartupScreen_StartupSplashScreen;
    GX_PIXELMAP_BUTTON StartupScreen_pixelmap_button;
} STARTUPSCREEN_CONTROL_BLOCK;

typedef struct PADCALIBRATIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW PadCalibrationScreen_PadScreenBackdrop;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_CenterPadON_Button;
    GX_PROMPT PadCalibrationScreen_MinimumInstructionsText;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_LeftPadON_Button;
    GX_TEXT_BUTTON PadCalibrationScreen_OK_Button;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_RightPadON_Button;
    GX_PROMPT PadCalibrationScreen_MaximumInstructionsText;
    GX_NUMERIC_PROMPT PadCalibrationScreen_Value_Prompt;
    GX_NUMERIC_PROMPT PadCalibrationScreen_PadValue_Prompt;
} PADCALIBRATIONSCREEN_CONTROL_BLOCK;

typedef struct FEATURESETTINGSSCREEN_OLD_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW FeatureSettingsScreen_OLD_UserSettingsScreenBackdrop;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_PowerButtonBackground;
    GX_PROMPT FeatureSettingsScreen_OLD_PowerPrompt;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_Power_ActiveIcon;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_Power_InactiveIcon;
    GX_PROMPT FeatureSettingsScreen_OLD_BluetoothPrompt;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_BluetoothButtonBackground;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_Bluetooth_ActiveIcon;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_Bluetooth_InactiveIcon;
    GX_PROMPT FeatureSettingsScreen_OLD_NextFunctionPrompt;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_NextFunctionButtonBackground;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_NextFunction_ActiveIcon;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_NextFunction_InactiveIcon;
    GX_PROMPT FeatureSettingsScreen_OLD_NextProfilePrompt;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_NextProfileButtonBackground;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_NextProfile_ActiveIcon;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_OLD_NextProfile_InactiveIcon;
    GX_TEXT_BUTTON FeatureSettingsScreen_OLD_OK_Button;
    GX_CHECKBOX FeatureSettingsScreen_OLD_BluetoothToggleBtn;
    GX_CHECKBOX FeatureSettingsScreen_OLD_PowerToggleBtn;
    GX_CHECKBOX FeatureSettingsScreen_OLD_NextFunctionToggleBtn;
    GX_CHECKBOX FeatureSettingsScreen_OLD_NextProfileToggleBtn;
} FEATURESETTINGSSCREEN_OLD_CONTROL_BLOCK;

typedef struct SETPADDIRECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW SetPadDirectionScreen_SetPadScreenBackdrop;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_LeftArrow_Button;
    GX_TEXT_BUTTON SetPadDirectionScreen_OK_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_RightArrow_Button;
    GX_PROMPT SetPadDirectionScreen_SettingPadPrompt;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_Off_Button;
    GX_PROMPT SetPadDirectionScreen_SettingPadPrompt_1;
} SETPADDIRECTIONSCREEN_CONTROL_BLOCK;

typedef struct PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW PadOptionsSettingsScreen_PadSettingsScreenBackdrop;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_PadSettings_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_PadDirection_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_OK_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_PadDirection_Button_1;
} PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct USERSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW UserSettingsScreen_UserSettingsScreenBackdrop;
    GX_PIXELMAP_BUTTON UserSettingsScreen_ClicksButtonBackground;
    GX_PROMPT UserSettingsScreen_Clicks_Prompt;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Clicks_ActiveIcon;
    GX_TEXT_BUTTON UserSettingsScreen_OK_Button;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Timer_Off_Button;
    GX_PROMPT UserSettingsScreen_TImeoutPrompt;
    GX_PROMPT UserSettingsScreen_PowerUpIdle_Prompt;
    GX_PIXELMAP_BUTTON UserSettingsScreen_PowerUpButtonBackground;
    GX_PIXELMAP_BUTTON UserSettingsScreen_PowerUp_InactiveIcon;
    GX_PIXELMAP_BUTTON UserSettingsScreen_PowerUp_ActiveIcon;
    GX_TEXT_BUTTON UserSettingsScreen_Timeout_Button;
    GX_PROMPT UserSettingsScreen_RNetActive_Prompt;
    GX_PIXELMAP_BUTTON UserSettingsScreen_RNetButtonBackground;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Clicks_InactiveIcon;
    GX_PIXELMAP_BUTTON UserSettingsScreen_RNet_InactiveIcon;
    GX_PIXELMAP_BUTTON UserSettingsScreen_RNet_ActiveIcon;
    GX_CHECKBOX UserSettingsScreen_ClicksToggleBtn;
    GX_CHECKBOX UserSettingsScreen_PowerUpToggleBtn;
    GX_CHECKBOX UserSettingsScreen_RNET_ToggleBtn;
} USERSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct SETPADTYPESCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW SetPadTypeScreen_SetPadScreenBackdrop;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_CenterPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_CenterPadProportional_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_LeftPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_LeftPadProportional_Button;
    GX_TEXT_BUTTON SetPadTypeScreen_OK_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_RightPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_RightPadProportional_Button;
    GX_PROMPT SetPadTypeScreen_SettingPadPrompt;
    GX_PROMPT SetPadTypeScreen_SettingPadPrompt_1;
} SETPADTYPESCREEN_CONTROL_BLOCK;

typedef struct DIAGNOSTICSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW DiagnosticScreen_DiagnosticScreenBackdrop;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadDigital_Button;
    GX_PROMPT DiagnosticScreen_InstructionsText;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadDigital_Button;
    GX_TEXT_BUTTON DiagnosticScreen_OK_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadDigital_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadOff_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadOff_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadOff_Button;
    GX_PROMPT DiagnosticScreen_LeftPad_Adjusted_Prompt;
    GX_PROMPT DiagnosticScreen_RightPad_Adjusted_Prompt;
    GX_PROMPT DiagnosticScreen_CenterPad_Adjusted_Prompt;
} DIAGNOSTICSCREEN_CONTROL_BLOCK;

typedef struct HHP_START_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_WINDOW HHP_Start_Screen_HHP_Start_Backdrop;
    GX_TEXT_BUTTON HHP_Start_Screen_MainMore_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_Settings_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_OK_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_PadSettings_Button;
} HHP_START_SCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern MAINUSERSCREEN_1_CONTROL_BLOCK MainUserScreen_1;
extern FEATURESETTINGSSCREEN_CONTROL_BLOCK FeatureSettingsScreen;
extern HHP_START_SCREEN_1_CONTROL_BLOCK HHP_Start_Screen_1;
extern MAINUSERSCREEN_3_CONTROL_BLOCK MainUserScreen_3;
extern MAINUSERSCREEN_2_CONTROL_BLOCK MainUserScreen_2;
extern ADVANCEPAD_3_SCREEN_CONTROL_BLOCK AdvancePad_3_Screen;
extern SETPADDIRECTIONSCREEN_1_CONTROL_BLOCK SetPadDirectionScreen_1;
extern ADVANCEPADSETTINGSSCREEN_2_CONTROL_BLOCK AdvancePadSettingsScreen_2;
extern ADVANCEPADSETTINGSSCREEN_1_CONTROL_BLOCK AdvancePadSettingsScreen_1;
extern ADVANCEPAD_2_SCREEN_CONTROL_BLOCK AdvancePad_2_Screen;
extern ADVANCEPAD_1_SCREEN_CONTROL_BLOCK AdvancePad_1_Screen;
extern ADVANCEPADSETTINGSSCREEN_CONTROL_BLOCK AdvancePadSettingsScreen;
extern MAINUSERSCREEN_CONTROL_BLOCK MainUserScreen;
extern RESETSCREEN_CONTROL_BLOCK ResetScreen;
extern MINIMUMDRIVESCREEN_CONTROL_BLOCK MinimumDriveScreen;
extern PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK PerformanceSelectionScreen;
extern RESETFINISHSCREEN_CONTROL_BLOCK ResetFinishScreen;
extern MORESELECTIONSCREEN_CONTROL_BLOCK MoreSelectionScreen;
extern USERSELECTIONSCREEN_CONTROL_BLOCK UserSelectionScreen;
extern VEERADJUSTSCREEN_CONTROL_BLOCK VeerAdjustScreen;
extern OON_SCREEN_CONTROL_BLOCK OON_Screen;
extern READYSCREEN_TEMPLATE_CONTROL_BLOCK ReadyScreen_Template;
extern STARTUPSCREEN_CONTROL_BLOCK StartupScreen;
extern PADCALIBRATIONSCREEN_CONTROL_BLOCK PadCalibrationScreen;
extern FEATURESETTINGSSCREEN_OLD_CONTROL_BLOCK FeatureSettingsScreen_OLD;
extern SETPADDIRECTIONSCREEN_CONTROL_BLOCK SetPadDirectionScreen;
extern PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK PadOptionsSettingsScreen;
extern USERSETTINGSSCREEN_CONTROL_BLOCK UserSettingsScreen;
extern SETPADTYPESCREEN_CONTROL_BLOCK SetPadTypeScreen;
extern DIAGNOSTICSCREEN_CONTROL_BLOCK DiagnosticScreen;
extern HHP_START_SCREEN_CONTROL_BLOCK HHP_Start_Screen;
extern PRIMARYTEMPLATE_CONTROL_BLOCK PrimaryTemplate;
#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT MainUserScreen_1_EventFunction(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT FeatureSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID FeatureList_callback(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT HHP_Start_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MainUserScreen_3_EventFunction(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT SetPadDirectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MainUserScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID MainUserScreen_draw_function(GX_WINDOW *widget);
UINT ResetScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MinimumDriveScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT PerformanceSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ResetFinishScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MoreSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT UserSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT VeerAdjust_Screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID VeerAdjust_Screen_draw_function(GX_WINDOW *widget);
UINT VeerSlider_event_function(GX_PIXELMAP_SLIDER *widget, GX_EVENT *event_ptr);
VOID Slider_Draw_Function(GX_PIXELMAP_SLIDER *widget);
UINT OON_Window_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT StartupScreen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID StartScreen_draw_function(GX_WINDOW *widget);
UINT CalibrationScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID CalibrationScreen_draw(GX_WINDOW *widget);
UINT PadOptionsSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT UserSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT SetPadTypeScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT DiagnosticScreen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT Template_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_CHAR ***language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_checkbox_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_numeric_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_list_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_template_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
